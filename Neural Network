import os
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader
import numpy as np
from sklearn.metrics import classification_report

# Device config
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Directories
train_dir = './data/train'  # you need to unzip and organize as train/test folders
val_dir = './data/val'

# Data transformations
data_transforms = {
    'train': transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.5], [0.5])
    ]),
    'val': transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize([0.5], [0.5])
    ])
}

# Load Datasets
image_datasets = {
    'train': datasets.ImageFolder(train_dir, data_transforms['train']),
    'val': datasets.ImageFolder(val_dir, data_transforms['val'])
}

dataloaders = {
    'train': DataLoader(image_datasets['train'], batch_size=32, shuffle=True, num_workers=4),
    'val': DataLoader(image_datasets['val'], batch_size=32, shuffle=False, num_workers=4)
}

class_names = image_datasets['train'].classes
num_classes = len(class_names)

# --- Simple CNN ---
class SimpleCNN(nn.Module):
    def __init__(self, num_classes):
        super(SimpleCNN, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2,2),

            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2,2),

            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2,2)
        )
        self.classifier = nn.Sequential(
            nn.Dropout(0.5),
            nn.Linear(128*28*28, 512),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(512, num_classes)
        )
    
    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)
        x = self.classifier(x)
        return x

# --- Train and Evaluate Function ---
def train_model(model, criterion, optimizer, num_epochs=10):
    for epoch in range(num_epochs):
        print(f'Epoch {epoch+1}/{num_epochs}')
        print('-'*10)
        
        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()
            else:
                model.eval()

            running_loss = 0.0
            running_corrects = 0

            for inputs, labels in dataloaders[phase]:
                inputs, labels = inputs.to(device), labels.to(device)

                optimizer.zero_grad()

                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(image_datasets[phase])
            epoch_acc = running_corrects.double() / len(image_datasets[phase])

            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')
    
    return model

# --- Experiment Configurations ---
experiments = [
    {'arch': 'SimpleCNN', 'lr': 0.001, 'optimizer': 'adam', 'batch_size': 32},
    {'arch': 'SimpleCNN', 'lr': 0.0005, 'optimizer': 'sgd', 'batch_size': 64},
    {'arch': 'ResNet18', 'lr': 0.001, 'optimizer': 'adam', 'batch_size': 32},
    {'arch': 'ResNet18', 'lr': 0.0001, 'optimizer': 'sgd', 'batch_size': 64},
]

# --- Main Loop to run experiments ---
for exp in experiments:
    print(f"\nRunning experiment: {exp}")
    
    # Change batch size if needed
    dataloaders['train'] = DataLoader(image_datasets['train'], batch_size=exp['batch_size'], shuffle=True, num_workers=4)
    dataloaders['val'] = DataLoader(image_datasets['val'], batch_size=exp['batch_size'], shuffle=False, num_workers=4)

    if exp['arch'] == 'SimpleCNN':
        model = SimpleCNN(num_classes=num_classes)
    elif exp['arch'] == 'ResNet18':
        model = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)
        model.fc = nn.Linear(model.fc.in_features, num_classes)
    else:
        raise ValueError('Unknown architecture')

    model = model.to(device)

    criterion = nn.CrossEntropyLoss()

    if exp['optimizer'] == 'adam':
        optimizer = optim.Adam(model.parameters(), lr=exp['lr'])
    else:
        optimizer = optim.SGD(model.parameters(), lr=exp['lr'], momentum=0.9)

    # Train the model
    model = train_model(model, criterion, optimizer, num_epochs=10)

    # Test final model
    model.eval()
    y_true = []
    y_pred = []

    with torch.no_grad():
        for inputs, labels in dataloaders['val']:
            inputs = inputs.to(device)
            labels = labels.to(device)
            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)
            y_true.extend(labels.cpu().numpy())
            y_pred.extend(preds.cpu().numpy())

    print(classification_report(y_true, y_pred, target_names=class_names))
